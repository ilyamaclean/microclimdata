// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// na_approx
NumericVector na_approx(NumericVector v);
RcppExport SEXP _microclimdata_na_approx(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(na_approx(v));
    return rcpp_result_gen;
END_RCPP
}
// splineCpp
NumericVector splineCpp(NumericVector daily_values);
RcppExport SEXP _microclimdata_splineCpp(SEXP daily_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type daily_values(daily_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(splineCpp(daily_values));
    return rcpp_result_gen;
END_RCPP
}
// napproxCpp
NumericVector napproxCpp(NumericVector pai, NumericMatrix landcover, NumericMatrix lpai);
RcppExport SEXP _microclimdata_napproxCpp(SEXP paiSEXP, SEXP landcoverSEXP, SEXP lpaiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pai(paiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type landcover(landcoverSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lpai(lpaiSEXP);
    rcpp_result_gen = Rcpp::wrap(napproxCpp(pai, landcover, lpai));
    return rcpp_result_gen;
END_RCPP
}
// uniquecpp
IntegerVector uniquecpp(const IntegerMatrix& matrix);
RcppExport SEXP _microclimdata_uniquecpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(uniquecpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// meanpai
NumericVector meanpai(NumericMatrix pai, IntegerMatrix landcover);
RcppExport SEXP _microclimdata_meanpai(SEXP paiSEXP, SEXP landcoverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pai(paiSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type landcover(landcoverSEXP);
    rcpp_result_gen = Rcpp::wrap(meanpai(pai, landcover));
    return rcpp_result_gen;
END_RCPP
}
// whichcpp
int whichcpp(IntegerVector v, int x);
RcppExport SEXP _microclimdata_whichcpp(SEXP vSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichcpp(v, x));
    return rcpp_result_gen;
END_RCPP
}
// fillpai
NumericMatrix fillpai(NumericMatrix pai, IntegerMatrix landcover);
RcppExport SEXP _microclimdata_fillpai(SEXP paiSEXP, SEXP landcoverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pai(paiSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type landcover(landcoverSEXP);
    rcpp_result_gen = Rcpp::wrap(fillpai(pai, landcover));
    return rcpp_result_gen;
END_RCPP
}
// expectedpai
NumericMatrix expectedpai(IntegerMatrix landcover, IntegerMatrix landcoverm, NumericMatrix pai);
RcppExport SEXP _microclimdata_expectedpai(SEXP landcoverSEXP, SEXP landcovermSEXP, SEXP paiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type landcover(landcoverSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type landcoverm(landcovermSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pai(paiSEXP);
    rcpp_result_gen = Rcpp::wrap(expectedpai(landcover, landcoverm, pai));
    return rcpp_result_gen;
END_RCPP
}
// seasoneffect
NumericVector seasoneffect(NumericVector lai);
RcppExport SEXP _microclimdata_seasoneffect(SEXP laiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lai(laiSEXP);
    rcpp_result_gen = Rcpp::wrap(seasoneffect(lai));
    return rcpp_result_gen;
END_RCPP
}
// seasonadjCpp
NumericVector seasonadjCpp(NumericVector lai, NumericVector seffect);
RcppExport SEXP _microclimdata_seasonadjCpp(SEXP laiSEXP, SEXP seffectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lai(laiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seffect(seffectSEXP);
    rcpp_result_gen = Rcpp::wrap(seasonadjCpp(lai, seffect));
    return rcpp_result_gen;
END_RCPP
}
// juldayCpp
int juldayCpp(int year, int month, int day);
RcppExport SEXP _microclimdata_juldayCpp(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type month(monthSEXP);
    Rcpp::traits::input_parameter< int >::type day(daySEXP);
    rcpp_result_gen = Rcpp::wrap(juldayCpp(year, month, day));
    return rcpp_result_gen;
END_RCPP
}
// hourlytempv
NumericVector hourlytempv(NumericVector tmn, NumericVector tmx, IntegerVector year, IntegerVector month, IntegerVector day, double lat, double lon, double srte);
RcppExport SEXP _microclimdata_hourlytempv(SEXP tmnSEXP, SEXP tmxSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latSEXP, SEXP lonSEXP, SEXP srteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tmn(tmnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tmx(tmxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type srte(srteSEXP);
    rcpp_result_gen = Rcpp::wrap(hourlytempv(tmn, tmx, year, month, day, lat, lon, srte));
    return rcpp_result_gen;
END_RCPP
}
// converthumidityCpp
NumericVector converthumidityCpp(NumericVector sph, NumericVector tc, NumericVector pk);
RcppExport SEXP _microclimdata_converthumidityCpp(SEXP sphSEXP, SEXP tcSEXP, SEXP pkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sph(sphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tc(tcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pk(pkSEXP);
    rcpp_result_gen = Rcpp::wrap(converthumidityCpp(sph, tc, pk));
    return rcpp_result_gen;
END_RCPP
}
// airMass
double airMass(double Z, double z);
RcppExport SEXP _microclimdata_airMass(SEXP ZSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(airMass(Z, z));
    return rcpp_result_gen;
END_RCPP
}
// dirtran
double dirtran(double Z, double TL, double z);
RcppExport SEXP _microclimdata_dirtran(SEXP ZSEXP, SEXP TLSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type TL(TLSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(dirtran(Z, TL, z));
    return rcpp_result_gen;
END_RCPP
}
// diftran
double diftran(double Z, double TL);
RcppExport SEXP _microclimdata_diftran(SEXP ZSEXP, SEXP TLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type TL(TLSEXP);
    rcpp_result_gen = Rcpp::wrap(diftran(Z, TL));
    return rcpp_result_gen;
END_RCPP
}
// extrarad
double extrarad(int jd);
RcppExport SEXP _microclimdata_extrarad(SEXP jdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type jd(jdSEXP);
    rcpp_result_gen = Rcpp::wrap(extrarad(jd));
    return rcpp_result_gen;
END_RCPP
}
// Linkev
NumericVector Linkev(NumericVector sh, NumericVector pk, NumericVector aod);
RcppExport SEXP _microclimdata_Linkev(SEXP shSEXP, SEXP pkSEXP, SEXP aodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sh(shSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type aod(aodSEXP);
    rcpp_result_gen = Rcpp::wrap(Linkev(sh, pk, aod));
    return rcpp_result_gen;
END_RCPP
}
// clearskyradv
NumericVector clearskyradv(IntegerVector year, IntegerVector month, IntegerVector day, NumericVector hr, double lat, double lon, double z, NumericVector TL);
RcppExport SEXP _microclimdata_clearskyradv(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP hrSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP zSEXP, SEXP TLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hr(hrSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type TL(TLSEXP);
    rcpp_result_gen = Rcpp::wrap(clearskyradv(year, month, day, hr, lat, lon, z, TL));
    return rcpp_result_gen;
END_RCPP
}
// clearskyradhourly
NumericVector clearskyradhourly(IntegerVector year, IntegerVector month, IntegerVector day, NumericVector hr, double lat, double lon, double z, NumericVector TL);
RcppExport SEXP _microclimdata_clearskyradhourly(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP hrSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP zSEXP, SEXP TLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hr(hrSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type TL(TLSEXP);
    rcpp_result_gen = Rcpp::wrap(clearskyradhourly(year, month, day, hr, lat, lon, z, TL));
    return rcpp_result_gen;
END_RCPP
}
// difpropvCpp
NumericVector difpropvCpp(NumericVector swrad, IntegerVector year, IntegerVector month, IntegerVector day, NumericVector hr, double lat, double lon);
RcppExport SEXP _microclimdata_difpropvCpp(SEXP swradSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP hrSEXP, SEXP latSEXP, SEXP lonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type swrad(swradSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hr(hrSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< double >::type lon(lonSEXP);
    rcpp_result_gen = Rcpp::wrap(difpropvCpp(swrad, year, month, day, hr, lat, lon));
    return rcpp_result_gen;
END_RCPP
}
// tempsix
NumericVector tempsix(NumericVector tc);
RcppExport SEXP _microclimdata_tempsix(SEXP tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tc(tcSEXP);
    rcpp_result_gen = Rcpp::wrap(tempsix(tc));
    return rcpp_result_gen;
END_RCPP
}
// prectohour
NumericVector prectohour(NumericVector prec);
RcppExport SEXP _microclimdata_prectohour(SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(prectohour(prec));
    return rcpp_result_gen;
END_RCPP
}
// blendtempCpp
NumericVector blendtempCpp(NumericVector tasmin, NumericVector tasmax, NumericVector temp);
RcppExport SEXP _microclimdata_blendtempCpp(SEXP tasminSEXP, SEXP tasmaxSEXP, SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tasmin(tasminSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tasmax(tasmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(blendtempCpp(tasmin, tasmax, temp));
    return rcpp_result_gen;
END_RCPP
}
// applytodaily
NumericVector applytodaily(NumericVector hourly, std::string func);
RcppExport SEXP _microclimdata_applytodaily(SEXP hourlySEXP, SEXP funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type hourly(hourlySEXP);
    Rcpp::traits::input_parameter< std::string >::type func(funcSEXP);
    rcpp_result_gen = Rcpp::wrap(applytodaily(hourly, func));
    return rcpp_result_gen;
END_RCPP
}
// blendprecCpp
NumericVector blendprecCpp(NumericVector precd, NumericVector prech);
RcppExport SEXP _microclimdata_blendprecCpp(SEXP precdSEXP, SEXP prechSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type precd(precdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prech(prechSEXP);
    rcpp_result_gen = Rcpp::wrap(blendprecCpp(precd, prech));
    return rcpp_result_gen;
END_RCPP
}
// satvapCpp
NumericVector satvapCpp(NumericVector tc);
RcppExport SEXP _microclimdata_satvapCpp(SEXP tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tc(tcSEXP);
    rcpp_result_gen = Rcpp::wrap(satvapCpp(tc));
    return rcpp_result_gen;
END_RCPP
}
// clearskya
NumericVector clearskya(IntegerVector year, IntegerVector month, IntegerVector day, NumericVector hr, NumericMatrix lats, NumericMatrix lons);
RcppExport SEXP _microclimdata_clearskya(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP hrSEXP, SEXP latsSEXP, SEXP lonsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hr(hrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lats(latsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lons(lonsSEXP);
    rcpp_result_gen = Rcpp::wrap(clearskya(year, month, day, hr, lats, lons));
    return rcpp_result_gen;
END_RCPP
}
// na_fill_matrix
NumericMatrix na_fill_matrix(NumericMatrix m, double pw);
RcppExport SEXP _microclimdata_na_fill_matrix(SEXP mSEXP, SEXP pwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type pw(pwSEXP);
    rcpp_result_gen = Rcpp::wrap(na_fill_matrix(m, pw));
    return rcpp_result_gen;
END_RCPP
}
// ordered_cells
List ordered_cells(NumericMatrix mat, int i, int j, double pw);
RcppExport SEXP _microclimdata_ordered_cells(SEXP matSEXP, SEXP iSEXP, SEXP jSEXP, SEXP pwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type pw(pwSEXP);
    rcpp_result_gen = Rcpp::wrap(ordered_cells(mat, i, j, pw));
    return rcpp_result_gen;
END_RCPP
}
// slicearray
NumericMatrix slicearray(NumericVector a, int d1, int d2, int d3, int k);
RcppExport SEXP _microclimdata_slicearray(SEXP aSEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP d3SEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< int >::type d3(d3SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(slicearray(a, d1, d2, d3, k));
    return rcpp_result_gen;
END_RCPP
}
// na_fill_array
NumericVector na_fill_array(NumericVector clima, NumericMatrix lsea, double pw);
RcppExport SEXP _microclimdata_na_fill_array(SEXP climaSEXP, SEXP lseaSEXP, SEXP pwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type clima(climaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lsea(lseaSEXP);
    Rcpp::traits::input_parameter< double >::type pw(pwSEXP);
    rcpp_result_gen = Rcpp::wrap(na_fill_array(clima, lsea, pw));
    return rcpp_result_gen;
END_RCPP
}
// expandssttohour
NumericVector expandssttohour(NumericVector sst);
RcppExport SEXP _microclimdata_expandssttohour(SEXP sstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sst(sstSEXP);
    rcpp_result_gen = Rcpp::wrap(expandssttohour(sst));
    return rcpp_result_gen;
END_RCPP
}
// remove_nas
NumericVector remove_nas(NumericVector v);
RcppExport SEXP _microclimdata_remove_nas(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_nas(v));
    return rcpp_result_gen;
END_RCPP
}
// calculate_mode
double calculate_mode(NumericVector x);
RcppExport SEXP _microclimdata_calculate_mode(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_mode(x));
    return rcpp_result_gen;
END_RCPP
}
// modalwinddir
NumericVector modalwinddir(NumericVector wd);
RcppExport SEXP _microclimdata_modalwinddir(SEXP wdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type wd(wdSEXP);
    rcpp_result_gen = Rcpp::wrap(modalwinddir(wd));
    return rcpp_result_gen;
END_RCPP
}
// mattoarray
NumericVector mattoarray(NumericMatrix m, int n);
RcppExport SEXP _microclimdata_mattoarray(SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mattoarray(m, n));
    return rcpp_result_gen;
END_RCPP
}
// solarindexarray
NumericVector solarindexarray(IntegerVector year, IntegerVector month, IntegerVector day, NumericVector hour, NumericMatrix lats, NumericMatrix lons);
RcppExport SEXP _microclimdata_solarindexarray(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP hourSEXP, SEXP latsSEXP, SEXP lonsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hour(hourSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lats(latsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lons(lonsSEXP);
    rcpp_result_gen = Rcpp::wrap(solarindexarray(year, month, day, hour, lats, lons));
    return rcpp_result_gen;
END_RCPP
}
// applymeanCpp
NumericMatrix applymeanCpp(NumericVector a);
RcppExport SEXP _microclimdata_applymeanCpp(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(applymeanCpp(a));
    return rcpp_result_gen;
END_RCPP
}
// temptoday
List temptoday(NumericVector tc);
RcppExport SEXP _microclimdata_temptoday(SEXP tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tc(tcSEXP);
    rcpp_result_gen = Rcpp::wrap(temptoday(tc));
    return rcpp_result_gen;
END_RCPP
}
// rhtoday
NumericVector rhtoday(NumericVector rh, NumericVector tc);
RcppExport SEXP _microclimdata_rhtoday(SEXP rhSEXP, SEXP tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rh(rhSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tc(tcSEXP);
    rcpp_result_gen = Rcpp::wrap(rhtoday(rh, tc));
    return rcpp_result_gen;
END_RCPP
}
// lwtoday
NumericVector lwtoday(NumericVector lwdown, NumericVector tc);
RcppExport SEXP _microclimdata_lwtoday(SEXP lwdownSEXP, SEXP tcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lwdown(lwdownSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tc(tcSEXP);
    rcpp_result_gen = Rcpp::wrap(lwtoday(lwdown, tc));
    return rcpp_result_gen;
END_RCPP
}
// tmnmxtodtr
List tmnmxtodtr(NumericVector tmn, NumericVector tmx);
RcppExport SEXP _microclimdata_tmnmxtodtr(SEXP tmnSEXP, SEXP tmxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tmn(tmnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tmx(tmxSEXP);
    rcpp_result_gen = Rcpp::wrap(tmnmxtodtr(tmn, tmx));
    return rcpp_result_gen;
END_RCPP
}
// sphtoea
NumericVector sphtoea(NumericVector sph, NumericVector pk);
RcppExport SEXP _microclimdata_sphtoea(SEXP sphSEXP, SEXP pkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sph(sphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pk(pkSEXP);
    rcpp_result_gen = Rcpp::wrap(sphtoea(sph, pk));
    return rcpp_result_gen;
END_RCPP
}
// netshorttodownshort
NumericVector netshorttodownshort(NumericVector rss, NumericVector alb);
RcppExport SEXP _microclimdata_netshorttodownshort(SEXP rssSEXP, SEXP albSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rss(rssSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alb(albSEXP);
    rcpp_result_gen = Rcpp::wrap(netshorttodownshort(rss, alb));
    return rcpp_result_gen;
END_RCPP
}
// netlwtoskyem
NumericVector netlwtoskyem(NumericVector rsl, NumericVector tmx, NumericVector tmn);
RcppExport SEXP _microclimdata_netlwtoskyem(SEXP rslSEXP, SEXP tmxSEXP, SEXP tmnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rsl(rslSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tmx(tmxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tmn(tmnSEXP);
    rcpp_result_gen = Rcpp::wrap(netlwtoskyem(rsl, tmx, tmn));
    return rcpp_result_gen;
END_RCPP
}
// uvtows
NumericVector uvtows(NumericVector u, NumericVector v);
RcppExport SEXP _microclimdata_uvtows(SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(uvtows(u, v));
    return rcpp_result_gen;
END_RCPP
}
// rainadjustm
NumericMatrix rainadjustm(NumericMatrix rainm, std::vector<double> rrain, std::vector<double> rfrac, std::vector<double> rtot);
RcppExport SEXP _microclimdata_rainadjustm(SEXP rainmSEXP, SEXP rrainSEXP, SEXP rfracSEXP, SEXP rtotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rainm(rainmSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rrain(rrainSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rfrac(rfracSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rtot(rtotSEXP);
    rcpp_result_gen = Rcpp::wrap(rainadjustm(rainm, rrain, rfrac, rtot));
    return rcpp_result_gen;
END_RCPP
}
// rangelimapply
NumericVector rangelimapply(NumericVector v1, NumericVector v2, NumericVector v3, NumericVector v3c, double rangelim);
RcppExport SEXP _microclimdata_rangelimapply(SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP, SEXP v3cSEXP, SEXP rangelimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v3(v3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v3c(v3cSEXP);
    Rcpp::traits::input_parameter< double >::type rangelim(rangelimSEXP);
    rcpp_result_gen = Rcpp::wrap(rangelimapply(v1, v2, v3, v3c, rangelim));
    return rcpp_result_gen;
END_RCPP
}
// prangelimapply
NumericVector prangelimapply(NumericVector v1, NumericVector v2, NumericVector v3, NumericVector v3c, double rangelim);
RcppExport SEXP _microclimdata_prangelimapply(SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP, SEXP v3cSEXP, SEXP rangelimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v3(v3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v3c(v3cSEXP);
    Rcpp::traits::input_parameter< double >::type rangelim(rangelimSEXP);
    rcpp_result_gen = Rcpp::wrap(prangelimapply(v1, v2, v3, v3c, rangelim));
    return rcpp_result_gen;
END_RCPP
}
// tempha
NumericVector tempha(NumericVector tmean, NumericVector dtr, IntegerVector year, IntegerVector month, IntegerVector day, NumericMatrix lats, NumericMatrix lons, double srte);
RcppExport SEXP _microclimdata_tempha(SEXP tmeanSEXP, SEXP dtrSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latsSEXP, SEXP lonsSEXP, SEXP srteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tmean(tmeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtr(dtrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lats(latsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lons(lonsSEXP);
    Rcpp::traits::input_parameter< double >::type srte(srteSEXP);
    rcpp_result_gen = Rcpp::wrap(tempha(tmean, dtr, year, month, day, lats, lons, srte));
    return rcpp_result_gen;
END_RCPP
}
// splina
NumericVector splina(NumericVector a);
RcppExport SEXP _microclimdata_splina(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(splina(a));
    return rcpp_result_gen;
END_RCPP
}
// relhuma
NumericVector relhuma(NumericVector ea, NumericVector tch);
RcppExport SEXP _microclimdata_relhuma(SEXP eaSEXP, SEXP tchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ea(eaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tch(tchSEXP);
    rcpp_result_gen = Rcpp::wrap(relhuma(ea, tch));
    return rcpp_result_gen;
END_RCPP
}
// dailyclm
NumericMatrix dailyclm(IntegerVector year, IntegerVector month, IntegerVector day, NumericVector lats);
RcppExport SEXP _microclimdata_dailyclm(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lats(latsSEXP);
    rcpp_result_gen = Rcpp::wrap(dailyclm(year, month, day, lats));
    return rcpp_result_gen;
END_RCPP
}
// dailycla
NumericVector dailycla(NumericMatrix csr, int cols);
RcppExport SEXP _microclimdata_dailycla(SEXP csrSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type csr(csrSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(dailycla(csr, cols));
    return rcpp_result_gen;
END_RCPP
}
// hourlyclm
NumericMatrix hourlyclm(IntegerVector year, IntegerVector month, IntegerVector day, NumericVector lats);
RcppExport SEXP _microclimdata_hourlyclm(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lats(latsSEXP);
    rcpp_result_gen = Rcpp::wrap(hourlyclm(year, month, day, lats));
    return rcpp_result_gen;
END_RCPP
}
// hourlycla
NumericVector hourlycla(IntegerVector year, IntegerVector month, IntegerVector day, NumericMatrix lats, NumericMatrix lons);
RcppExport SEXP _microclimdata_hourlycla(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latsSEXP, SEXP lonsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lats(latsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lons(lonsSEXP);
    rcpp_result_gen = Rcpp::wrap(hourlycla(year, month, day, lats, lons));
    return rcpp_result_gen;
END_RCPP
}
// hourlydifa
NumericVector hourlydifa(NumericVector swrad, IntegerVector year, IntegerVector month, IntegerVector day, NumericMatrix lats, NumericMatrix lons);
RcppExport SEXP _microclimdata_hourlydifa(SEXP swradSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP, SEXP latsSEXP, SEXP lonsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type swrad(swradSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type month(monthSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type day(daySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lats(latsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lons(lonsSEXP);
    rcpp_result_gen = Rcpp::wrap(hourlydifa(swrad, year, month, day, lats, lons));
    return rcpp_result_gen;
END_RCPP
}
// lwrada
NumericVector lwrada(NumericVector skyem, NumericVector tch);
RcppExport SEXP _microclimdata_lwrada(SEXP skyemSEXP, SEXP tchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type skyem(skyemSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tch(tchSEXP);
    rcpp_result_gen = Rcpp::wrap(lwrada(skyem, tch));
    return rcpp_result_gen;
END_RCPP
}
// precha
NumericVector precha(NumericVector precd);
RcppExport SEXP _microclimdata_precha(SEXP precdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type precd(precdSEXP);
    rcpp_result_gen = Rcpp::wrap(precha(precd));
    return rcpp_result_gen;
END_RCPP
}
// coastexpm
NumericVector coastexpm(NumericMatrix coastm, int n);
RcppExport SEXP _microclimdata_coastexpm(SEXP coastmSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coastm(coastmSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(coastexpm(coastm, n));
    return rcpp_result_gen;
END_RCPP
}
// coastexpa
NumericVector coastexpa(NumericVector winddir, NumericVector coastexp, int n);
RcppExport SEXP _microclimdata_coastexpa(SEXP winddirSEXP, SEXP coastexpSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type winddir(winddirSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coastexp(coastexpSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(coastexpa(winddir, coastexp, n));
    return rcpp_result_gen;
END_RCPP
}
// apply3D
NumericMatrix apply3D(NumericVector a);
RcppExport SEXP _microclimdata_apply3D(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(apply3D(a));
    return rcpp_result_gen;
END_RCPP
}
// find_pai
NumericMatrix find_pai(NumericMatrix ndvi);
RcppExport SEXP _microclimdata_find_pai(SEXP ndviSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ndvi(ndviSEXP);
    rcpp_result_gen = Rcpp::wrap(find_pai(ndvi));
    return rcpp_result_gen;
END_RCPP
}
// find_gref
NumericMatrix find_gref(NumericMatrix lref, NumericMatrix pai, NumericMatrix x, NumericMatrix albin);
RcppExport SEXP _microclimdata_find_gref(SEXP lrefSEXP, SEXP paiSEXP, SEXP xSEXP, SEXP albinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lref(lrefSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pai(paiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type albin(albinSEXP);
    rcpp_result_gen = Rcpp::wrap(find_gref(lref, pai, x, albin));
    return rcpp_result_gen;
END_RCPP
}
// find_lref
NumericMatrix find_lref(NumericMatrix pai, NumericMatrix gref, NumericMatrix x, NumericMatrix albin);
RcppExport SEXP _microclimdata_find_lref(SEXP paiSEXP, SEXP grefSEXP, SEXP xSEXP, SEXP albinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pai(paiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gref(grefSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type albin(albinSEXP);
    rcpp_result_gen = Rcpp::wrap(find_lref(pai, gref, x, albin));
    return rcpp_result_gen;
END_RCPP
}
// getsoiltypecpp
IntegerMatrix getsoiltypecpp(NumericMatrix bulkden, NumericMatrix clay, NumericMatrix sand, NumericMatrix silt);
RcppExport SEXP _microclimdata_getsoiltypecpp(SEXP bulkdenSEXP, SEXP claySEXP, SEXP sandSEXP, SEXP siltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type bulkden(bulkdenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type clay(claySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sand(sandSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type silt(siltSEXP);
    rcpp_result_gen = Rcpp::wrap(getsoiltypecpp(bulkden, clay, sand, silt));
    return rcpp_result_gen;
END_RCPP
}
// calcclumpcppone
NumericMatrix calcclumpcppone(NumericMatrix leafd, NumericMatrix hgt, NumericMatrix lai, double n);
RcppExport SEXP _microclimdata_calcclumpcppone(SEXP leafdSEXP, SEXP hgtSEXP, SEXP laiSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type leafd(leafdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type hgt(hgtSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lai(laiSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcclumpcppone(leafd, hgt, lai, n));
    return rcpp_result_gen;
END_RCPP
}
// calcclumpcpp
NumericMatrix calcclumpcpp(NumericMatrix leafd, NumericMatrix hgt, NumericMatrix lai, double mx);
RcppExport SEXP _microclimdata_calcclumpcpp(SEXP leafdSEXP, SEXP hgtSEXP, SEXP laiSEXP, SEXP mxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type leafd(leafdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type hgt(hgtSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lai(laiSEXP);
    Rcpp::traits::input_parameter< double >::type mx(mxSEXP);
    rcpp_result_gen = Rcpp::wrap(calcclumpcpp(leafd, hgt, lai, mx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microclimdata_na_approx", (DL_FUNC) &_microclimdata_na_approx, 1},
    {"_microclimdata_splineCpp", (DL_FUNC) &_microclimdata_splineCpp, 1},
    {"_microclimdata_napproxCpp", (DL_FUNC) &_microclimdata_napproxCpp, 3},
    {"_microclimdata_uniquecpp", (DL_FUNC) &_microclimdata_uniquecpp, 1},
    {"_microclimdata_meanpai", (DL_FUNC) &_microclimdata_meanpai, 2},
    {"_microclimdata_whichcpp", (DL_FUNC) &_microclimdata_whichcpp, 2},
    {"_microclimdata_fillpai", (DL_FUNC) &_microclimdata_fillpai, 2},
    {"_microclimdata_expectedpai", (DL_FUNC) &_microclimdata_expectedpai, 3},
    {"_microclimdata_seasoneffect", (DL_FUNC) &_microclimdata_seasoneffect, 1},
    {"_microclimdata_seasonadjCpp", (DL_FUNC) &_microclimdata_seasonadjCpp, 2},
    {"_microclimdata_juldayCpp", (DL_FUNC) &_microclimdata_juldayCpp, 3},
    {"_microclimdata_hourlytempv", (DL_FUNC) &_microclimdata_hourlytempv, 8},
    {"_microclimdata_converthumidityCpp", (DL_FUNC) &_microclimdata_converthumidityCpp, 3},
    {"_microclimdata_airMass", (DL_FUNC) &_microclimdata_airMass, 2},
    {"_microclimdata_dirtran", (DL_FUNC) &_microclimdata_dirtran, 3},
    {"_microclimdata_diftran", (DL_FUNC) &_microclimdata_diftran, 2},
    {"_microclimdata_extrarad", (DL_FUNC) &_microclimdata_extrarad, 1},
    {"_microclimdata_Linkev", (DL_FUNC) &_microclimdata_Linkev, 3},
    {"_microclimdata_clearskyradv", (DL_FUNC) &_microclimdata_clearskyradv, 8},
    {"_microclimdata_clearskyradhourly", (DL_FUNC) &_microclimdata_clearskyradhourly, 8},
    {"_microclimdata_difpropvCpp", (DL_FUNC) &_microclimdata_difpropvCpp, 7},
    {"_microclimdata_tempsix", (DL_FUNC) &_microclimdata_tempsix, 1},
    {"_microclimdata_prectohour", (DL_FUNC) &_microclimdata_prectohour, 1},
    {"_microclimdata_blendtempCpp", (DL_FUNC) &_microclimdata_blendtempCpp, 3},
    {"_microclimdata_applytodaily", (DL_FUNC) &_microclimdata_applytodaily, 2},
    {"_microclimdata_blendprecCpp", (DL_FUNC) &_microclimdata_blendprecCpp, 2},
    {"_microclimdata_satvapCpp", (DL_FUNC) &_microclimdata_satvapCpp, 1},
    {"_microclimdata_clearskya", (DL_FUNC) &_microclimdata_clearskya, 6},
    {"_microclimdata_na_fill_matrix", (DL_FUNC) &_microclimdata_na_fill_matrix, 2},
    {"_microclimdata_ordered_cells", (DL_FUNC) &_microclimdata_ordered_cells, 4},
    {"_microclimdata_slicearray", (DL_FUNC) &_microclimdata_slicearray, 5},
    {"_microclimdata_na_fill_array", (DL_FUNC) &_microclimdata_na_fill_array, 3},
    {"_microclimdata_expandssttohour", (DL_FUNC) &_microclimdata_expandssttohour, 1},
    {"_microclimdata_remove_nas", (DL_FUNC) &_microclimdata_remove_nas, 1},
    {"_microclimdata_calculate_mode", (DL_FUNC) &_microclimdata_calculate_mode, 1},
    {"_microclimdata_modalwinddir", (DL_FUNC) &_microclimdata_modalwinddir, 1},
    {"_microclimdata_mattoarray", (DL_FUNC) &_microclimdata_mattoarray, 2},
    {"_microclimdata_solarindexarray", (DL_FUNC) &_microclimdata_solarindexarray, 6},
    {"_microclimdata_applymeanCpp", (DL_FUNC) &_microclimdata_applymeanCpp, 1},
    {"_microclimdata_temptoday", (DL_FUNC) &_microclimdata_temptoday, 1},
    {"_microclimdata_rhtoday", (DL_FUNC) &_microclimdata_rhtoday, 2},
    {"_microclimdata_lwtoday", (DL_FUNC) &_microclimdata_lwtoday, 2},
    {"_microclimdata_tmnmxtodtr", (DL_FUNC) &_microclimdata_tmnmxtodtr, 2},
    {"_microclimdata_sphtoea", (DL_FUNC) &_microclimdata_sphtoea, 2},
    {"_microclimdata_netshorttodownshort", (DL_FUNC) &_microclimdata_netshorttodownshort, 2},
    {"_microclimdata_netlwtoskyem", (DL_FUNC) &_microclimdata_netlwtoskyem, 3},
    {"_microclimdata_uvtows", (DL_FUNC) &_microclimdata_uvtows, 2},
    {"_microclimdata_rainadjustm", (DL_FUNC) &_microclimdata_rainadjustm, 4},
    {"_microclimdata_rangelimapply", (DL_FUNC) &_microclimdata_rangelimapply, 5},
    {"_microclimdata_prangelimapply", (DL_FUNC) &_microclimdata_prangelimapply, 5},
    {"_microclimdata_tempha", (DL_FUNC) &_microclimdata_tempha, 8},
    {"_microclimdata_splina", (DL_FUNC) &_microclimdata_splina, 1},
    {"_microclimdata_relhuma", (DL_FUNC) &_microclimdata_relhuma, 2},
    {"_microclimdata_dailyclm", (DL_FUNC) &_microclimdata_dailyclm, 4},
    {"_microclimdata_dailycla", (DL_FUNC) &_microclimdata_dailycla, 2},
    {"_microclimdata_hourlyclm", (DL_FUNC) &_microclimdata_hourlyclm, 4},
    {"_microclimdata_hourlycla", (DL_FUNC) &_microclimdata_hourlycla, 5},
    {"_microclimdata_hourlydifa", (DL_FUNC) &_microclimdata_hourlydifa, 6},
    {"_microclimdata_lwrada", (DL_FUNC) &_microclimdata_lwrada, 2},
    {"_microclimdata_precha", (DL_FUNC) &_microclimdata_precha, 1},
    {"_microclimdata_coastexpm", (DL_FUNC) &_microclimdata_coastexpm, 2},
    {"_microclimdata_coastexpa", (DL_FUNC) &_microclimdata_coastexpa, 3},
    {"_microclimdata_apply3D", (DL_FUNC) &_microclimdata_apply3D, 1},
    {"_microclimdata_find_pai", (DL_FUNC) &_microclimdata_find_pai, 1},
    {"_microclimdata_find_gref", (DL_FUNC) &_microclimdata_find_gref, 4},
    {"_microclimdata_find_lref", (DL_FUNC) &_microclimdata_find_lref, 4},
    {"_microclimdata_getsoiltypecpp", (DL_FUNC) &_microclimdata_getsoiltypecpp, 4},
    {"_microclimdata_calcclumpcppone", (DL_FUNC) &_microclimdata_calcclumpcppone, 4},
    {"_microclimdata_calcclumpcpp", (DL_FUNC) &_microclimdata_calcclumpcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_microclimdata(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
